/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package io.github.richsan

import io.kotlintest.properties.Gen
import richsan.KDynaMapper
import software.amazon.awssdk.services.dynamodb.model.AttributeValue
import java.lang.reflect.GenericArrayType
import java.math.BigDecimal
import java.math.BigInteger
import java.time.Instant
import java.util.*
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertTrue

data class SimpleObject(val msg : String = Gen.string().random().first(),
                        val number : Int = Gen.int().random().first(),
                        val bigNum: BigInteger = Gen.bigInteger(42).random().first(),
                        val bigDec : BigDecimal = BigDecimal("424242424244242424242424242424242"),
                        val uuid : UUID = UUID.randomUUID(),
                        val valid: Boolean = Gen.bool().random().first(),
                        val time: Instant = Instant.now(),
                        val floatNum: Float = Gen.float().random().first(),
                        val doubleNum: Double = Gen.double().random().first(),
                        val objList: List<Person> = Gen.list(PersonGenerator()).random().first(),
                        val nestedObject : SimpleObject? = null
                        )

data class Person(val firstName: String = Gen.string().random().first(),
                  val lastName: String = Gen.string().random().first(),
                  val age : Int = Gen.int().random().first())

class PersonGenerator : Gen<Person> {
    override fun constants() = emptyList<Person>()
    override fun random() = generateSequence {
        Person()
    }
}

class SimpleObjectGenerator : Gen<SimpleObject> {
    override fun constants() = emptyList<SimpleObject>()
    override fun random() = generateSequence {
        SimpleObject()
    }
}


class DataClassTest {
    @Test fun testSomeDataClass() {
        val obj = SimpleObject(nestedObject = SimpleObject())
        val dynaMap = KDynaMapper.mapToDynamoObjectRequest(obj)

        validateDynaMapAgainstSimpleObject(dynaMap,obj)
        validateDynaMapAgainstSimpleObject(dynaMap["nestedObject"]!!.m(), obj.nestedObject!!)
        val newObj = KDynaMapper.fromDynamoMapResponse(dynaMap, SimpleObject::class)

        assertEquals(obj, newObj, "Object deserialized differs from original source object")
    }

    private fun validateDynaMapAgainstSimpleObject(dynaMap : Map<String, AttributeValue>, obj: SimpleObject) {
        assertEquals(obj.msg, dynaMap["msg"]?.s(), "Differs at msg field")
        assertEquals(obj.number.toString(), dynaMap["number"]?.n(), "Differs at number field")
        assertEquals(obj.bigNum.toString(), dynaMap["bigNum"]?.n(), "Differs at bigNum field")
        assertEquals(obj.bigDec.toString(), dynaMap["bigDec"]?.n(), "Differs at bigDec field")
        assertEquals(obj.uuid.toString(), dynaMap["uuid"]?.s(), "Differs at uuid field")
        assertEquals(obj.valid, dynaMap["valid"]?.bool(), "Differs at valid field")
        assertEquals(obj.time.toString(), dynaMap["time"]?.s(), "Differs at time field")
        assertEquals(obj.floatNum.toString(), dynaMap["floatNum"]?.n(), "Differs at floatNum field")
        assertEquals(obj.doubleNum.toString(), dynaMap["doubleNum"]?.n(), "Differs at doubleNum field")
    }
}
